{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours de Terminale NSI Programme du cours Interfaces de programmation d'applications R\u00e9cursivit\u00e9 Modularit\u00e9 Programmation objet Listes cha\u00een\u00e9es Mise au point de programmes M\u00e9thode diviser pour r\u00e9gner Piles et files Arbres Arbres binaires de recherche Recherche textuelle Graphes Graphes pond\u00e9r\u00e9s Calculabilit\u00e9 et d\u00e9cidabilit\u00e9 Documents et logiciels \u00e0 t\u00e9l\u00e9charger Cahier d'exercices et d'activit\u00e9s Le cahier associ\u00e9 \u00e0 ce cours est t\u00e9l\u00e9chargeable ici au format PDF. Installation d'Anaconda La suite Anaconda , t\u00e9l\u00e9chargeable ici , contient l'\u00e9diteur de carnets Jupyter et l'\u00e9diteur de code Spyder .","title":"Accueil"},{"location":"#cours-de-terminale-nsi","text":"","title":"Cours de Terminale NSI"},{"location":"#programme-du-cours","text":"Interfaces de programmation d'applications R\u00e9cursivit\u00e9 Modularit\u00e9 Programmation objet Listes cha\u00een\u00e9es Mise au point de programmes M\u00e9thode diviser pour r\u00e9gner Piles et files Arbres Arbres binaires de recherche Recherche textuelle Graphes Graphes pond\u00e9r\u00e9s Calculabilit\u00e9 et d\u00e9cidabilit\u00e9","title":"Programme du cours"},{"location":"#documents-et-logiciels-a-telecharger","text":"Cahier d'exercices et d'activit\u00e9s Le cahier associ\u00e9 \u00e0 ce cours est t\u00e9l\u00e9chargeable ici au format PDF. Installation d'Anaconda La suite Anaconda , t\u00e9l\u00e9chargeable ici , contient l'\u00e9diteur de carnets Jupyter et l'\u00e9diteur de code Spyder .","title":"Documents et logiciels \u00e0 t\u00e9l\u00e9charger"},{"location":"api/","text":"Chapitre 1 : Interfaces de programmation d'applications Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici Une API ( Application Programming Interface ), ou une interface de programmation d\u2019applications , est un ensemble de classes, fonctions, constantes gr\u00e2ce auquel un programme fournisseur met \u00e0 disposition diverses fonctionnalit\u00e9s pour des programmes consommateurs . C'est le programme fournisseur qui d\u00e9finit de quelle fa\u00e7on les fonctionnalit\u00e9s sont mises \u00e0 disposition des consommateurs, en imposant \u00e9ventuellement un certain nombre de contraintes d'acc\u00e8s \u00e0 l'API. On s'int\u00e9resse ici \u00e0 la Base Adresse Nationale qui est une API gratuite du gouvernement fran\u00e7ais permettant d'obtenir un certain nombre d'informations \u00e0 partir d'une adresse postale. Interrogation de l'API On souhaite, gr\u00e2ce \u00e0 l'API, obtenir des informations sur l'adresse postale du lyc\u00e9e Louis Armand. Pour interroger l'API, il suffit d'envoyer une requ\u00eate GET \u00e0 l'adresse https://api-adresse.data.gouv.fr/search/?q=173-boulevard-de-strasbourg&postcode=94130 . On remarque que l'adresse postale sur laquelle on souhaite interroger l'API est indiqu\u00e9e dans l'URL. La r\u00e9ponse renvoy\u00e9e par l'API est la suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"type\" : \"FeatureCollection\" , \"version\" : \"draft\" , \"features\" : [{ \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 2.491306 , 48.846716 ]}, \"properties\" : { \"label\" : \"173 Boulevard de Strasbourg 94130 Nogent-sur-Marne\" , \"score\" : 0.88381 , \"housenumber\" : \"173\" , \"id\" : \"94052_8560_00173\" , \"name\" : \"173 Boulevard de Strasbourg\" , \"postcode\" : \"94130\" , \"citycode\" : \"94052\" , \"x\" : 662668.4 , \"y\" : 6860861.49 , \"city\" : \"Nogent-sur-Marne\" , \"context\" : \"94, Val-de-Marne, \u00cele-de-France\" , \"type\" : \"housenumber\" , \"importance\" : 0.72191 , \"street\" : \"Boulevard de Strasbourg\" }}], \"attribution\" : \"BAN\" , \"licence\" : \"ETALAB-2.0\" , \"query\" : \"173-boulevard-de-strasbourg\" , \"filters\" : { \"postcode\" : \"94130\" }, \"limit\" : 5 } La r\u00e9ponse re\u00e7ue est au format JSON ( JavaScript Object Notation ). La signification des champs de la r\u00e9ponse est donn\u00e9e dans la documentation de l'API. L'interrogation de l'API peut \u00eatre r\u00e9alis\u00e9e gr\u00e2ce au code Python ci-dessous. Lors de son ex\u00e9cution, la r\u00e9ponse renvoy\u00e9e par l'API est stock\u00e9e dans la variable reponse . Impl\u00e9mentation 1 2 3 4 import requests url = \"https://api-adresse.data.gouv.fr/search/?q=173-boulevard-de-strasbourg&postcode=94130\" reponse = requests . get ( url ) reponse = reponse . json () La fonction get du module requests permet d'envoyer une requ\u00eate GET \u00e0 l'URL sp\u00e9cifi\u00e9e et ensuite de r\u00e9cup\u00e9rer la r\u00e9ponse. La commande reponse.json() extrait de la r\u00e9ponse les donn\u00e9es encod\u00e9es dans le format JSON, qui est un format de donn\u00e9es textuelles que l'on peut traiter comme s'il s'agissait d'un dictionnaire Python. Traitement de la r\u00e9ponse renvoy\u00e9e par l'API Il est possible de d\u00e9finir une fonction qui interroge l'API \u00e0 partir d'une adresse postale au choix, pass\u00e9e en param\u00e8tre. Premi\u00e8re version : donn\u00e9es compl\u00e8tes Fonction interroger_API_BAN Interroge l'API Base Adresse Nationale . Entr\u00e9es adresse : cha\u00eene de caract\u00e8res code_postal : entier ou cha\u00eene de caract\u00e8res Sortie reponse : dictionnaire contenant l'ensemble des donn\u00e9es renvoy\u00e9es par l'API Penser \u00e0 importer le module requests ! Impl\u00e9mentation 1 2 3 4 5 def interroger_API_BAN ( adresse , code_postal ): url = f \"https://api-adresse.data.gouv.fr/search/?q= { adresse } &postcode= { code_postal } \" reponse = requests . get ( url ) reponse = reponse . json () return reponse Ici, la fonction renvoie l'ensemble des donn\u00e9es r\u00e9cup\u00e9r\u00e9es via l'API. La plupart du temps, on souhaite n\u00e9anmoins isoler les donn\u00e9es qui nous int\u00e9ressent et elles seules. Seconde version : donn\u00e9es s\u00e9lectionn\u00e9es Fonction interroger_API_BAN Renvoie les coordonn\u00e9es g\u00e9ographiques d'un lieu apr\u00e8s interrogation de l'API Base Adresse Nationale . Entr\u00e9es adresse : cha\u00eene de caract\u00e8res code_postal : entier ou cha\u00eene de caract\u00e8res Sortie (lat, long) : couple de coordonn\u00e9es g\u00e9ographiques Penser \u00e0 importer le module requests ! Impl\u00e9mentation 1 2 3 4 5 6 7 8 def interroger_API_BAN ( adresse , code_postal ): url = f \"https://api-adresse.data.gouv.fr/search/?q= { adresse } &postcode= { code_postal } \" reponse = requests . get ( url ) reponse = reponse . json () coord = reponse [ 'features' ][ 0 ][ 'geometry' ][ 'coordinates' ] long = coord [ 0 ] lat = coord [ 1 ] return ( lat , long ) L'utilisation d'une f-string pour l'\u00e9criture de l'URL permet d'y int\u00e9grer simplement et lisiblement les param\u00e8tres d'entr\u00e9e de la fonction. Une fois la r\u00e9ponse de l'API transform\u00e9e en dictionnaire, il suffit de naviguer pour r\u00e9cup\u00e9rer les donn\u00e9es qui nous int\u00e9ressent, comme par exemple les coordonn\u00e9es g\u00e9ographiques de l'adresse pass\u00e9e en param\u00e8tre. reponse est un dictionnaire poss\u00e9dant huit cl\u00e9s : 'type' , 'version' , 'features' , 'attribution' , 'licence' , 'query' , 'filters' et 'limit' . reponse['features'] est un tableau contenant un ou plusieurs \u00e9l\u00e9ments de type dictionnaire : chaque dictionnaire correspond \u00e0 une adresse potentielle, la premi\u00e8re (indice 0 ) \u00e9tant la plus susceptible de correspondre \u00e0 notre demande. reponse['features'][0] est un dictionnaire poss\u00e9dant trois cl\u00e9s : 'type' , 'geometry' et 'properties' . reponse['features'][0]['geometry'] est un dictionnaire poss\u00e9dant deux cl\u00e9s : 'type' et 'coordinates' . reponse['features'][0]['geometry']['coordinates'] est un tableau contenant deux \u00e9l\u00e9ments de type flottant : la longitude (indice 0 ) et la latitude (indice 1 ) du lieu. Exercices et activit\u00e9s Exercices Ast\u00e9ro\u00efdes \u00e0 surveiller Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Bulletin m\u00e9t\u00e9o Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Composition des produits alimentaires Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici D\u00e9coupage administratif Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Activit\u00e9s Carte de vigilance m\u00e9t\u00e9orologique L'objectif de l'activit\u00e9 est d'utiliser une API pour r\u00e9aliser une carte de vigilance m\u00e9t\u00e9orologique. Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici \u26a0\ufe0f Le fichier carte_france.py doit \u00eatre plac\u00e9 dans le m\u00eame r\u00e9pertoire que le carnet act_vigilance_meteo.ipynb . Corrig\u00e9 bient\u00f4t disponible ici Centres de vaccination anti-Covid L'objectif de l'activit\u00e9 est d'utiliser une API pour cartographier les centres de vaccination anti-Covid d'un d\u00e9partement. Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Station spatiale internationale L'objectif de l'activit\u00e9 est d'utiliser une API pour suivre les d\u00e9placements de la station spatiale internationale. Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici","title":"Interfaces de programmation d'applications"},{"location":"api/#chapitre-1-interfaces-de-programmation-dapplications","text":"Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici Une API ( Application Programming Interface ), ou une interface de programmation d\u2019applications , est un ensemble de classes, fonctions, constantes gr\u00e2ce auquel un programme fournisseur met \u00e0 disposition diverses fonctionnalit\u00e9s pour des programmes consommateurs . C'est le programme fournisseur qui d\u00e9finit de quelle fa\u00e7on les fonctionnalit\u00e9s sont mises \u00e0 disposition des consommateurs, en imposant \u00e9ventuellement un certain nombre de contraintes d'acc\u00e8s \u00e0 l'API. On s'int\u00e9resse ici \u00e0 la Base Adresse Nationale qui est une API gratuite du gouvernement fran\u00e7ais permettant d'obtenir un certain nombre d'informations \u00e0 partir d'une adresse postale.","title":"Chapitre 1 : Interfaces de programmation d'applications"},{"location":"api/#interrogation-de-lapi","text":"On souhaite, gr\u00e2ce \u00e0 l'API, obtenir des informations sur l'adresse postale du lyc\u00e9e Louis Armand. Pour interroger l'API, il suffit d'envoyer une requ\u00eate GET \u00e0 l'adresse https://api-adresse.data.gouv.fr/search/?q=173-boulevard-de-strasbourg&postcode=94130 . On remarque que l'adresse postale sur laquelle on souhaite interroger l'API est indiqu\u00e9e dans l'URL. La r\u00e9ponse renvoy\u00e9e par l'API est la suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"type\" : \"FeatureCollection\" , \"version\" : \"draft\" , \"features\" : [{ \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 2.491306 , 48.846716 ]}, \"properties\" : { \"label\" : \"173 Boulevard de Strasbourg 94130 Nogent-sur-Marne\" , \"score\" : 0.88381 , \"housenumber\" : \"173\" , \"id\" : \"94052_8560_00173\" , \"name\" : \"173 Boulevard de Strasbourg\" , \"postcode\" : \"94130\" , \"citycode\" : \"94052\" , \"x\" : 662668.4 , \"y\" : 6860861.49 , \"city\" : \"Nogent-sur-Marne\" , \"context\" : \"94, Val-de-Marne, \u00cele-de-France\" , \"type\" : \"housenumber\" , \"importance\" : 0.72191 , \"street\" : \"Boulevard de Strasbourg\" }}], \"attribution\" : \"BAN\" , \"licence\" : \"ETALAB-2.0\" , \"query\" : \"173-boulevard-de-strasbourg\" , \"filters\" : { \"postcode\" : \"94130\" }, \"limit\" : 5 } La r\u00e9ponse re\u00e7ue est au format JSON ( JavaScript Object Notation ). La signification des champs de la r\u00e9ponse est donn\u00e9e dans la documentation de l'API. L'interrogation de l'API peut \u00eatre r\u00e9alis\u00e9e gr\u00e2ce au code Python ci-dessous. Lors de son ex\u00e9cution, la r\u00e9ponse renvoy\u00e9e par l'API est stock\u00e9e dans la variable reponse . Impl\u00e9mentation 1 2 3 4 import requests url = \"https://api-adresse.data.gouv.fr/search/?q=173-boulevard-de-strasbourg&postcode=94130\" reponse = requests . get ( url ) reponse = reponse . json () La fonction get du module requests permet d'envoyer une requ\u00eate GET \u00e0 l'URL sp\u00e9cifi\u00e9e et ensuite de r\u00e9cup\u00e9rer la r\u00e9ponse. La commande reponse.json() extrait de la r\u00e9ponse les donn\u00e9es encod\u00e9es dans le format JSON, qui est un format de donn\u00e9es textuelles que l'on peut traiter comme s'il s'agissait d'un dictionnaire Python.","title":"Interrogation de l'API"},{"location":"api/#traitement-de-la-reponse-renvoyee-par-lapi","text":"Il est possible de d\u00e9finir une fonction qui interroge l'API \u00e0 partir d'une adresse postale au choix, pass\u00e9e en param\u00e8tre. Premi\u00e8re version : donn\u00e9es compl\u00e8tes Fonction interroger_API_BAN Interroge l'API Base Adresse Nationale . Entr\u00e9es adresse : cha\u00eene de caract\u00e8res code_postal : entier ou cha\u00eene de caract\u00e8res Sortie reponse : dictionnaire contenant l'ensemble des donn\u00e9es renvoy\u00e9es par l'API Penser \u00e0 importer le module requests ! Impl\u00e9mentation 1 2 3 4 5 def interroger_API_BAN ( adresse , code_postal ): url = f \"https://api-adresse.data.gouv.fr/search/?q= { adresse } &postcode= { code_postal } \" reponse = requests . get ( url ) reponse = reponse . json () return reponse Ici, la fonction renvoie l'ensemble des donn\u00e9es r\u00e9cup\u00e9r\u00e9es via l'API. La plupart du temps, on souhaite n\u00e9anmoins isoler les donn\u00e9es qui nous int\u00e9ressent et elles seules. Seconde version : donn\u00e9es s\u00e9lectionn\u00e9es Fonction interroger_API_BAN Renvoie les coordonn\u00e9es g\u00e9ographiques d'un lieu apr\u00e8s interrogation de l'API Base Adresse Nationale . Entr\u00e9es adresse : cha\u00eene de caract\u00e8res code_postal : entier ou cha\u00eene de caract\u00e8res Sortie (lat, long) : couple de coordonn\u00e9es g\u00e9ographiques Penser \u00e0 importer le module requests ! Impl\u00e9mentation 1 2 3 4 5 6 7 8 def interroger_API_BAN ( adresse , code_postal ): url = f \"https://api-adresse.data.gouv.fr/search/?q= { adresse } &postcode= { code_postal } \" reponse = requests . get ( url ) reponse = reponse . json () coord = reponse [ 'features' ][ 0 ][ 'geometry' ][ 'coordinates' ] long = coord [ 0 ] lat = coord [ 1 ] return ( lat , long ) L'utilisation d'une f-string pour l'\u00e9criture de l'URL permet d'y int\u00e9grer simplement et lisiblement les param\u00e8tres d'entr\u00e9e de la fonction. Une fois la r\u00e9ponse de l'API transform\u00e9e en dictionnaire, il suffit de naviguer pour r\u00e9cup\u00e9rer les donn\u00e9es qui nous int\u00e9ressent, comme par exemple les coordonn\u00e9es g\u00e9ographiques de l'adresse pass\u00e9e en param\u00e8tre. reponse est un dictionnaire poss\u00e9dant huit cl\u00e9s : 'type' , 'version' , 'features' , 'attribution' , 'licence' , 'query' , 'filters' et 'limit' . reponse['features'] est un tableau contenant un ou plusieurs \u00e9l\u00e9ments de type dictionnaire : chaque dictionnaire correspond \u00e0 une adresse potentielle, la premi\u00e8re (indice 0 ) \u00e9tant la plus susceptible de correspondre \u00e0 notre demande. reponse['features'][0] est un dictionnaire poss\u00e9dant trois cl\u00e9s : 'type' , 'geometry' et 'properties' . reponse['features'][0]['geometry'] est un dictionnaire poss\u00e9dant deux cl\u00e9s : 'type' et 'coordinates' . reponse['features'][0]['geometry']['coordinates'] est un tableau contenant deux \u00e9l\u00e9ments de type flottant : la longitude (indice 0 ) et la latitude (indice 1 ) du lieu.","title":"Traitement de la r\u00e9ponse renvoy\u00e9e par l'API"},{"location":"api/#exercices-et-activites","text":"Exercices Ast\u00e9ro\u00efdes \u00e0 surveiller Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Bulletin m\u00e9t\u00e9o Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Composition des produits alimentaires Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici D\u00e9coupage administratif Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Activit\u00e9s Carte de vigilance m\u00e9t\u00e9orologique L'objectif de l'activit\u00e9 est d'utiliser une API pour r\u00e9aliser une carte de vigilance m\u00e9t\u00e9orologique. Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici \u26a0\ufe0f Le fichier carte_france.py doit \u00eatre plac\u00e9 dans le m\u00eame r\u00e9pertoire que le carnet act_vigilance_meteo.ipynb . Corrig\u00e9 bient\u00f4t disponible ici Centres de vaccination anti-Covid L'objectif de l'activit\u00e9 est d'utiliser une API pour cartographier les centres de vaccination anti-Covid d'un d\u00e9partement. Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici Station spatiale internationale L'objectif de l'activit\u00e9 est d'utiliser une API pour suivre les d\u00e9placements de la station spatiale internationale. Carnet Jupyter \u00e0 travailler sur le site CAPYTALE ou \u00e0 t\u00e9l\u00e9charger ici Corrig\u00e9 bient\u00f4t disponible ici","title":"Exercices et activit\u00e9s"},{"location":"exemple/","text":"Titre Sous titre Document joint Exercice Exercice suppl\u00e9mentaire Activit\u00e9 Bla bla bla bla bla... Solution R\u00e9ponses au probl\u00e8me.... A retenir Sur le cahier Erreur Important !","title":"Titre"},{"location":"exemple/#titre","text":"","title":"Titre"},{"location":"exemple/#sous-titre","text":"Document joint Exercice Exercice suppl\u00e9mentaire Activit\u00e9 Bla bla bla bla bla... Solution R\u00e9ponses au probl\u00e8me.... A retenir Sur le cahier Erreur Important !","title":"Sous titre"},{"location":"recursivite/","text":"Chapitre 2 : R\u00e9cursivit\u00e9 Partie A - Notion de fonction r\u00e9cursive Le but de ce chapitre est d'introduire le concept de fonction r\u00e9cursive . Il s'agit d'une fonction qui fait appel \u00e0 elle-m\u00eame lors de son ex\u00e9cution. Premier exemple : calcul de x puissance n On suppose que x est un nombre et que n est un entier positif et on souhaite d\u00e9finir une fonction puissance qui calcule x puissance n . Fonction puissance D\u00e9termine la valeur de x puissance n . Entr\u00e9es x : entier ou flottant n : entier positif Sortie val : m\u00eame type que le param\u00e8tre d'entr\u00e9e x Impl\u00e9mentation Version it\u00e9rative Une premi\u00e8re fa\u00e7on de faire est d'utiliser une boucle pour : on obtient une version it\u00e9rative de la fonction. 1 2 3 4 5 def puissance ( x , n ): val = 1 for k in range ( 1 , n + 1 ): val = x * val return val Version r\u00e9cursive En remarquant que \\(x ^ 0=1\\) et que, si \\(n \u2265 1\\) , alors \\(x ^ n = x \\times x ^{n\u22121}\\) , on peut \u00e9crire une version r\u00e9cursive de la fonction. 1 2 3 4 5 def puissance ( x , n ): if n == 0 : return 1 else : return x * puissance ( x , n - 1 ) Ainsi d\u00e9finie, la fonction est une fonction r\u00e9cursive parce qu'elle s'appelle elle-m\u00eame dans le cas o\u00f9 n est non nul. On distingue deux parties dans l'\u00e9criture d'une fonction r\u00e9cursive : un (ou plusieurs) cas r\u00e9sursif(s) , dans lesquels la fonction fait appel \u00e0 elle-m\u00eame avec de nouveaux arguments, un (ou plusieurs) cas de base , qui permet(tent) de mettre un terme aux appels r\u00e9cursifs successifs. Deuxi\u00e8me exemple : calcul de la somme des entiers compris entre a et b On suppose que a est inf\u00e9rieur \u00e0 b et on souhaite d\u00e9finir une fonction somme qui calcule la somme des entiers compris entre a et b . Fonction somme D\u00e9termine la somme des entiers compris entre a et b . Entr\u00e9es a : entier b : entier sup\u00e9rieur \u00e0 a Sortie total : entier Impl\u00e9mentation Version it\u00e9rative 1 2 3 4 5 def somme ( a , b ): total = 0 for k in range ( a , b + 1 ): total = total + k return total Version r\u00e9cursive Deux cas sont \u00e0 envisager : Si a == b (cas de base), cela signifie qu'il y a un seul nombre dans la liste des nombres \u00e0 additionner : le nombre a . On renvoie donc sa valeur. Si a < b (cas r\u00e9cursif), on calcule r\u00e9cursivement la somme des entiers compris entre a+1 et b , on y ajoute la valeur de a et on renvoie le total. 1 2 3 4 5 6 def somme ( a , b ): if a == b : total = a else : total = a + somme ( a + 1 , b ) return total Troisi\u00e8me exemple : calcul du produit des entiers compris entre 1 et n On suppose que n est un entier strictement positif et on souhaite d\u00e9finir une fonction factorielle qui calcule le produit des entiers compris entre 1 et n . Fonction factorielle D\u00e9termine le produit des entiers compris entre 1 et n . Entr\u00e9e n : entier strictement positif Sortie fac : entier Impl\u00e9mentation Version it\u00e9rative 1 2 3 4 5 def factorielle ( n ): fac = 1 for k in range ( 2 , n + 1 ): fac = k * fac return fac Version r\u00e9cursive 1 2 3 4 5 6 def factorielle ( n ): if n == 0 : fac = 1 else : fac = n * factorielle ( n - 1 ) return fac Partie B - Pile d'appels r\u00e9cursifs Activit\u00e9s Figures fractales dessin\u00e9es r\u00e9cursivement L'objectif de l'activit\u00e9 est de d\u00e9finir des fonctions r\u00e9cursives permettant de tracer, avec le module turtle , des figures fractales telles que le triangle de Sierpi\u0144ski. Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici A ECRIRE Le compte est bon ! L'objectif de l'activit\u00e9 est de cr\u00e9er un solveur du jeu t\u00e9l\u00e9vis\u00e9 Le compte est bon ! , dont voici un extrait de la version britannique Countdown . Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici","title":"R\u00e9cursivit\u00e9"},{"location":"recursivite/#chapitre-2-recursivite","text":"","title":"Chapitre 2 : R\u00e9cursivit\u00e9"},{"location":"recursivite/#partie-a-notion-de-fonction-recursive","text":"Le but de ce chapitre est d'introduire le concept de fonction r\u00e9cursive . Il s'agit d'une fonction qui fait appel \u00e0 elle-m\u00eame lors de son ex\u00e9cution.","title":"Partie A - Notion de fonction r\u00e9cursive"},{"location":"recursivite/#premier-exemple-calcul-de-x-puissance-n","text":"On suppose que x est un nombre et que n est un entier positif et on souhaite d\u00e9finir une fonction puissance qui calcule x puissance n . Fonction puissance D\u00e9termine la valeur de x puissance n . Entr\u00e9es x : entier ou flottant n : entier positif Sortie val : m\u00eame type que le param\u00e8tre d'entr\u00e9e x Impl\u00e9mentation Version it\u00e9rative Une premi\u00e8re fa\u00e7on de faire est d'utiliser une boucle pour : on obtient une version it\u00e9rative de la fonction. 1 2 3 4 5 def puissance ( x , n ): val = 1 for k in range ( 1 , n + 1 ): val = x * val return val Version r\u00e9cursive En remarquant que \\(x ^ 0=1\\) et que, si \\(n \u2265 1\\) , alors \\(x ^ n = x \\times x ^{n\u22121}\\) , on peut \u00e9crire une version r\u00e9cursive de la fonction. 1 2 3 4 5 def puissance ( x , n ): if n == 0 : return 1 else : return x * puissance ( x , n - 1 ) Ainsi d\u00e9finie, la fonction est une fonction r\u00e9cursive parce qu'elle s'appelle elle-m\u00eame dans le cas o\u00f9 n est non nul. On distingue deux parties dans l'\u00e9criture d'une fonction r\u00e9cursive : un (ou plusieurs) cas r\u00e9sursif(s) , dans lesquels la fonction fait appel \u00e0 elle-m\u00eame avec de nouveaux arguments, un (ou plusieurs) cas de base , qui permet(tent) de mettre un terme aux appels r\u00e9cursifs successifs.","title":"Premier exemple : calcul de x puissance n"},{"location":"recursivite/#deuxieme-exemple-calcul-de-la-somme-des-entiers-compris-entre-a-et-b","text":"On suppose que a est inf\u00e9rieur \u00e0 b et on souhaite d\u00e9finir une fonction somme qui calcule la somme des entiers compris entre a et b . Fonction somme D\u00e9termine la somme des entiers compris entre a et b . Entr\u00e9es a : entier b : entier sup\u00e9rieur \u00e0 a Sortie total : entier Impl\u00e9mentation Version it\u00e9rative 1 2 3 4 5 def somme ( a , b ): total = 0 for k in range ( a , b + 1 ): total = total + k return total Version r\u00e9cursive Deux cas sont \u00e0 envisager : Si a == b (cas de base), cela signifie qu'il y a un seul nombre dans la liste des nombres \u00e0 additionner : le nombre a . On renvoie donc sa valeur. Si a < b (cas r\u00e9cursif), on calcule r\u00e9cursivement la somme des entiers compris entre a+1 et b , on y ajoute la valeur de a et on renvoie le total. 1 2 3 4 5 6 def somme ( a , b ): if a == b : total = a else : total = a + somme ( a + 1 , b ) return total","title":"Deuxi\u00e8me exemple : calcul de la somme des entiers compris entre a et b"},{"location":"recursivite/#troisieme-exemple-calcul-du-produit-des-entiers-compris-entre-1-et-n","text":"On suppose que n est un entier strictement positif et on souhaite d\u00e9finir une fonction factorielle qui calcule le produit des entiers compris entre 1 et n . Fonction factorielle D\u00e9termine le produit des entiers compris entre 1 et n . Entr\u00e9e n : entier strictement positif Sortie fac : entier Impl\u00e9mentation Version it\u00e9rative 1 2 3 4 5 def factorielle ( n ): fac = 1 for k in range ( 2 , n + 1 ): fac = k * fac return fac Version r\u00e9cursive 1 2 3 4 5 6 def factorielle ( n ): if n == 0 : fac = 1 else : fac = n * factorielle ( n - 1 ) return fac","title":"Troisi\u00e8me exemple : calcul du produit des entiers compris entre 1 et n"},{"location":"recursivite/#partie-b-pile-dappels-recursifs","text":"","title":"Partie B - Pile d'appels r\u00e9cursifs"},{"location":"recursivite/#activites","text":"Figures fractales dessin\u00e9es r\u00e9cursivement L'objectif de l'activit\u00e9 est de d\u00e9finir des fonctions r\u00e9cursives permettant de tracer, avec le module turtle , des figures fractales telles que le triangle de Sierpi\u0144ski. Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici A ECRIRE Le compte est bon ! L'objectif de l'activit\u00e9 est de cr\u00e9er un solveur du jeu t\u00e9l\u00e9vis\u00e9 Le compte est bon ! , dont voici un extrait de la version britannique Countdown . Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici","title":"Activit\u00e9s"}]}